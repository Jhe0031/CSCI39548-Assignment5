{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["searchAPI","props","handleInputChange","event","setState","City","target","value","toUpperCase","handleSearchClick","a","cityName","state","linkToAPI","axios","get","response","apiData","data","found","console","log","status","makeTable","currData","table","i","length","push","id","className","type","this","placeholder","onChange","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSA0EeA,E,kDApEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAEC,KAAMF,EAAMG,OAAOC,MAAMC,iBAVxB,EAanBC,kBAbmB,sBAaC,gCAAAC,EAAA,6DACdC,EAAW,EAAKC,MAAMP,KAEtBQ,EAAY,0CAA4CF,EAH1C,kBAKKG,IAAMC,IAAIF,GALf,OAKZG,EALY,OAMhB,EAAKZ,SAAS,CAACa,QAASD,EAASE,KAAMC,OAAO,IAN9B,gDAQZ,KAAMH,WACRI,QAAQC,IAAI,eAAgB,KAAML,SAASE,MAC3CE,QAAQC,IAAI,iBAAkB,KAAML,SAASM,QAC7C,EAAKlB,SAAS,CAACe,OAAO,KAXR,yDAbD,EA6BnBI,UAAY,WACV,IAAIC,EAAW,EAAKZ,MAAMK,QAEtBQ,EAAQ,GAEZ,GAHiB,EAAKb,MAAMO,MAM1B,IAAK,IAAIO,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IACnCD,EAAMG,KACJ,6BACE,6BAAKJ,EAASE,MADPF,EAASE,GAAGG,UAJzBJ,EAAMG,KAAK,6BAAa,8CAAH,IAUvB,OAAOH,GA3CP,EAAKb,MAAQ,CACXK,QAAS,GACTZ,KAAM,GACNc,OAAO,GALQ,E,0CAgDnB,WACE,OACE,sBAAKW,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,+CACA,uBAAOC,KAAK,OAAOxB,MAAOyB,KAAKpB,MAAMP,KAAM4B,YAAY,YAAYC,SAAUF,KAAK9B,oBAClF,wBAAQ4B,UAAU,cAAcK,QAASH,KAAKvB,kBAA9C,uBAEF,uBACA,6CACA,uBAAOoB,GAAG,OAAV,SACE,gCACGG,KAAKT,uB,GA7DMa,aCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1Bb,M","file":"static/js/main.b44eebcb.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\n//creates array for api data, an open string for City and state is set to false until found\r\nclass searchAPI extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      apiData: [],\r\n      City: \"\",\r\n      found: false\r\n    }\r\n  }\r\n  //function for what happens when you input, it sets the state and converts everything to uppercase\r\n  handleInputChange = (event) => {\r\n    this.setState({ City: event.target.value.toUpperCase()});\r\n  }\r\n//function for what happens when you click the search button\r\n  handleSearchClick = async() => {\r\n    let cityName = this.state.City;\r\n    // eslint-disable-next-line\r\n    let linkToAPI = 'https://ctp-zip-api.herokuapp.com/city/' + cityName;\r\n    try {\r\n      let response = await axios.get(linkToAPI);\r\n      this.setState({apiData: response.data, found: true})\r\n    } catch (error) {\r\n      if (error.response) {\r\n        console.log(\"Error Data: \", error.response.data); //Not found\r\n        console.log(\"Error Status: \", error.response.status); //404\r\n        this.setState({found: false});\r\n      }\r\n    }\r\n  }\r\n\r\n  makeTable = () => {\r\n    let currData = this.state.apiData;\r\n    let foundMatch = this.state.found;\r\n    let table = [];\r\n    //found is false when we get 404 error\r\n    if (!foundMatch) {\r\n      table.push(<tr key={-1}><td>No Results</td></tr>);\r\n    } else {\r\n      for (let i = 0; i < currData.length; i++) {\r\n        table.push(\r\n          <tr key={currData[i].id}>\r\n            <td>{currData[i]}</td>\r\n          </tr>\r\n        )\r\n      }\r\n    }\r\n    return table;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <h3>Search City: </h3>\r\n          <input type=\"text\" value={this.state.City} placeholder=\"city name\" onChange={this.handleInputChange}/>\r\n          <button className=\"search-city\" onClick={this.handleSearchClick}>Search</button>\r\n        </div>\r\n        <br/>\r\n        <h5>Zip Codes: </h5>\r\n        <table id=\"data\">\r\n          <tbody>\r\n            {this.makeTable()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default searchAPI;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function         <input type = \"text\" value = {this.state.city} onChange={this.Input} placeholder=\"Enter city name\"/>\r\n\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}